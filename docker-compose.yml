services:
  mysql:
    image: mysql:8.1
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 1q2w3e4r
      MYSQL_DATABASE: project_db

    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s

  kafka1:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      # 호스트 머신의 IP나 '0.0.0.0'으로 모든 외부 접근 허용
      #KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://host.docker.internal:9092  # localhost -> host.docker.internal
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://192.168.0.11:9092  # localhost -> host.docker.internal
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s
    networks:
      - app-network

  kafka2:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      #KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:29093,EXTERNAL://host.docker.internal:9093  # localhost -> host.docker.internal
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:29093,EXTERNAL://192.168.0.11:9093  # localhost -> host.docker.internal
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29093,EXTERNAL://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9093" ]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s
    networks:
      - app-network

  kafka3:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      #KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:29094,EXTERNAL://host.docker.internal:9094  # localhost -> host.docker.internal
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:29094,EXTERNAL://192.168.0.11:9094  # localhost -> host.docker.internal
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29094,EXTERNAL://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9094" ]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s
    networks:
      - app-network


  elasticsearch:
    image: elasticsearch:8.16.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s
    networks:
      - app-network

  kibana:
    image: kibana:8.16.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  backend:
    image: gradle:jdk17-corretto-al2023
    # Gradle 이미지를 사용
    container_name: spring
    build:
      context: ./backend # Spring Boot 프로젝트 경로
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app # 로컬 소스를 컨테이너 내부에 마운트
      - ~/.gradle:/root/.gradle # Gradle 캐시 공유
    working_dir: /app
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200  # Elasticsearch 서비스 URI 설정
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/project_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=1q2w3e4r
    command: sh -c "gradle clean build && gradle bootRun --no-daemon"
    networks:
      - app-network

  erp:
    image: gradle:jdk17-corretto-al2023
    container_name: erp
    build:
      context: ./Erp # ERP Spring Boot 프로젝트 경로
    ports:
      - "8081:8081" # ERP 서버는 8081 포트를 사용
    volumes:
      - ./Erp:/app # 로컬 소스를 컨테이너 내부에 마운트
      - ~/.gradle:/root/.gradle # Gradle 캐시 공유
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/project_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=1q2w3e4r
    working_dir: /app
    command: sh -c "gradle clean build && gradle bootRun --no-daemon"
    networks:
      - app-network

  shopfront:
    build:
      context: ./frontend  # Dockerfile이 위치한 경로
      dockerfile: Dockerfile  # Dockerfile 파일명 (기본적으로 Dockerfile이므로 생략 가능)
    container_name: shopfront
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app  # 로컬 소스 마운트
      - /app/node_modules  # 컨테이너 내부에서 node_modules을 별도로 관리

    working_dir: /app
    networks:
      - app-network
    environment:
      - NODE_ENV=production  # 프로덕션 환경에서 실행되도록 설정
    command: sh -c "npm install && npm run build && npm run start"

  erpfront:
    build:
      context: ./erpfornt/my-next-app  # Dockerfile이 위치한 경로
      dockerfile: Dockerfile  # Dockerfile 파일명 (기본적으로 Dockerfile이므로 생략 가능)
    container_name: erpfront
    ports:
      - "3001:3001"  # 외부 포트와 컨테이너 포트 매핑
    volumes:
      - ./erpfornt/my-next-app:/app  # 로컬 소스 마운트
      - /app/node_modules  # 컨테이너 내부에서 node_modules을 별도로 관리
      - ./certificates:/app/certificates  # 인증서 폴더 마운트
    working_dir: /app
    networks:
      - app-network
    environment:
      - NODE_ENV=production  # 프로덕션 환경에서 실행되도록 설정
    command: sh -c "npm install && npm run build && node server.js"  # 서버 실행 명령어


volumes:
  es_data:
    driver: local
  mysql_data: # mysql_data 볼륨 정의 추가
    driver: local

networks:
  app-network:
    driver: bridge
